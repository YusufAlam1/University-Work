import pytest
from assignment2 import mirror, grey, invert, merge, compress

# Test cases for mirror function
@pytest.mark.parametrize("input_data, expected", [
    ([[[1, 2, 3]]], [[[1, 2, 3]]]),
    ([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[7, 8, 9], [4, 5, 6], [1, 2, 3]]]),
    ([[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]]], [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]]]),
    ([[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]], [[[2, 2, 2], [1, 1, 1]], [[4, 4, 4], [3, 3, 3]]]),
    ([[[0, 0, 0], [255, 255, 255]], [[255, 255, 255], [0, 0, 0]]], [[[255, 255, 255], [0, 0, 0]], [[0, 0, 0], [255, 255, 255]]]),
])
def test_mirror(input_data, expected):
    mirror(input_data)
    assert input_data == expected


# Test cases for grey function
@pytest.mark.parametrize("input_data, expected", [
    ([[[10, 20, 30]]], [[[20, 20, 20]]]),
    ([[[10, 20, 30], [30, 60, 90], [90, 30, 60]]], [[[20, 20, 20], [60, 60, 60], [60, 60, 60]]]),
    ([[[10, 10, 10], [100, 100, 100]], [[50, 50, 50], [150, 150, 150]]], [[[10, 10, 10], [100, 100, 100]], [[50, 50, 50], [150, 150, 150]]]),
    ([[[0, 0, 0], [255, 255, 255]], [[255, 255, 255], [0, 0, 0]]], [[[0, 0, 0], [255, 255, 255]], [[255, 255, 255], [0, 0, 0]]]),
    ([[[0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0]]]),
])
def test_grey(input_data, expected):
    grey(input_data)
    assert input_data == expected


# Test cases for invert function
@pytest.mark.parametrize("input_data, expected", [
    ([[[10, 20, 30]]], [[[30, 20, 10]]]),
    ([[[0, 0, 0], [255, 255, 255], [100, 150, 200]]], [[[0, 0, 0], [255, 255, 255], [200, 150, 100]]]),
    ([[[0, 128, 255], [128, 0, 255]], [[255, 255, 255], [0, 0, 0]]], [[[255, 128, 0], [128, 255, 0]], [[255, 255, 255], [0, 0, 0]]]),
    ([[[10, 20, 30], [40, 50, 60]], [[70, 80, 90], [100, 110, 120]]], [[[30, 20, 10], [60, 50, 40]], [[90, 80, 70], [120, 110, 100]]]),
    ([[[0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0]]]),
])
def test_invert(input_data, expected):
    invert(input_data)
    assert input_data == expected


# Test cases for merge function
@pytest.mark.parametrize("input_data, expected", [
    (([[[1, 1, 1]]], [[[2, 2, 2]]]), [[[1, 1, 1]]]),
    (([[[1, 2, 3], [4, 5, 6]]], [[[7, 8, 9], [10, 11, 12]]]), [[[1, 2, 3], [4, 5, 6]]]),
    (([[[1, 1, 1]], [[2, 2, 2]]], [[[3, 3, 3]], [[4, 4, 4]]]), [[[1, 1, 1]], [[4, 4, 4]]]),
    (([[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]], [[[5, 5, 5], [6, 6, 6]], [[7, 7, 7], [8, 8, 8]]]), [[[1, 1, 1], [2, 2, 2]], [[7, 7, 7], [8, 8, 8]]]),
    (([[[0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0]]], [[[255, 255, 255], [255, 255, 255]], [[255, 255, 255], [255, 255, 255]]]), [[[0, 0, 0], [0, 0, 0]], [[255, 255, 255], [255, 255, 255]]]),
])
def test_merge(input_data, expected):
    result = merge(*input_data)
    assert result == expected


# Test cases for compress function
@pytest.mark.parametrize("input_data, expected", [
    ([[[100, 100, 100]]], [[[100, 100, 100]]]),
    ([[[255, 0, 0], [255, 0, 0]], [[255, 0, 0], [255, 0, 0]]], [[[255, 0, 0]]]),
    ([[[255, 0, 0], [0, 255, 0]], [[0, 255, 0], [255, 0, 0]]], [[[127, 127, 0]]]),
    ([[[10, 10, 10], [10, 10, 10], [20, 20, 20], [20, 20, 20]], [[10, 10, 10], [10, 10, 10], [20, 20, 20], [20, 20, 20]], [[30, 30, 30], [30, 30, 30], [40, 40, 40], [40, 40, 40]], [[30, 30, 30], [30, 30, 30], [40, 40, 40], [40, 40, 40]]], [[[10, 10, 10], [20, 20, 20]], [[30, 30, 30], [40, 40, 40]]]),
    ([[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]], [[12, 13, 14], [15, 16, 17], [18, 19, 20], [21, 22, 23]], [[24, 25, 26], [27, 28, 29], [30, 31, 32], [33, 34, 35]], [[36, 37, 38], [39, 40, 41], [42, 43, 44], [45, 46, 47]]], [[[7, 8, 9], [13, 14, 15]], [[31, 32, 33], [37, 38, 39]]]),
])
def test_compress(input_data, expected):
    result = compress(input_data)
    assert result == expected
